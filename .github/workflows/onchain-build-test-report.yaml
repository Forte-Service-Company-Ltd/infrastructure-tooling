# GitOps On-chain Build Test and Report Workflow - Callable from remote repositories
# Builds and tests for on-chain projects.
# This workflow is designed to be called from other repositories via 'workflow_call' event.

name: On-Chain Build and Test
on:
  # Triggered from app repo's workflows
  workflow_call:
    inputs:
      # Define any inputs needed from the calling workflow
      gh-app-id:
        description: GitHub App ID for generating tokens
        type: string
        required: false
        default: ""
      project-repositories:
        description: Comma-separated list of project repositories to run the workflow on
        type: string
        required: false
        default: ""
      markdown-file-path:
        description: Comma-separated list of markdown files to check
        type: string
        required: false
        default: "./README.md, ./CHANGELOG.md, ./CODE_OF_CONDUCT.md, ./CONTRIBUTING.md, ./SECURITY.md"
      fork-test:
        description: Whether to run tests that require forking mainnet (true/false)
        type: boolean
        required: false
        default: false
      salt-string:
        description: Salt string for generating unique addresses in tests
        type: string
        required: false
        default: "SMELLING_SALTS"
      skip-forte-token-tests:
        description: Whether to skip tests related to Forte Token (true/false)
        type: boolean
        required: false
        default: true
      is-forte-token-project:
        description: Whether this is the Forte Token project (enables Forte-specific env vars)
        type: boolean
        required: false
        default: false
    outputs:
      status:
        description: The overall status of the workflow, either 'success', 'failure', or 'skipped'
        value: ${{ jobs.build-and-test.result == 'success' && jobs.markdown-link-check.result == 'success' && jobs.code-coverage-report.result == 'success' && 'success' || 'failure' }}
    secrets:
      # Secrets are passed from the calling repository
      ALCHEMY_KEY: # optional, only if needed for tests requiring mainnet fork
        required: false
        description: Alchemy API URI for Ethereum mainnet (for tests requiring mainnet fork)
      POLYGON_ALCHEMY_KEY: # optional, only if needed for tests requiring polygon fork
        required: false
        description: Alchemy API URI for Polygon mainnet (for tests requiring polygon fork)

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      token: ${{ steps.get-token.outputs.token }}
    steps:
      - name: Generate GitHub App token
        id: get-token
        if: inputs.gh-app-id != ''
        uses: actions/create-github-app-token@v2
        with: # The app-id needs to be set and private-key should be configured in the calling repository's secrets to access private repos.
          app-id: ${{ inputs.gh-app-id }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          repositories: ${{ inputs.project-repositories }}
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get-token.outputs.token || github.token}}
          submodules: recursive
      - name: Checkout infrastructure-tooling repository
        uses: actions/checkout@v4
        with:
          repository: Forte-Service-Company-Ltd/infrastructure-tooling
          ref: v0.0.3
          path: infrastructure-tooling
      - name: Generate cache key
        id: cache-key
        run: |
          # Create a cache key based on workflow inputs and file hashes
          WORKFLOW_HASH=$(echo "${{ github.sha }}-${{ inputs.fork-test }}-${{ inputs.salt-string }}-${{ inputs.skip-forte-token-tests }}-${{ inputs.is-forte-token-project }}" | sha256sum | cut -d' ' -f1)
          # Include package manager files in cache key if they exist
          if [ -f "package.json" ]; then
            PACKAGE_HASH=$(sha256sum package.json | cut -d' ' -f1)
          else
            PACKAGE_HASH="no-package"
          fi
          if [ -f "foundry.toml" ]; then
            FOUNDRY_HASH=$(sha256sum foundry.toml | cut -d' ' -f1)
          else
            FOUNDRY_HASH="no-foundry"
          fi
          CACHE_KEY="setup-v1-${WORKFLOW_HASH}-${PACKAGE_HASH}-${FOUNDRY_HASH}"
          echo "key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Cache key: ${CACHE_KEY}"
      - name: Install Foundry
        id: install-foundry
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/install-foundry@v0.0.3
      - name: Install Python Dependencies
        id: install-python-dependencies
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/install-python-dependencies@INF-298-Optimizing-On-Chain-Build-and-Test
      - name: Locate and cache Foundry binaries
        run: |
          mkdir -p bin

          # Simple search for forge binary
          FORGE_PATH=""
          if command -v forge >/dev/null 2>&1; then
            FORGE_PATH=$(which forge)
          elif [ -f ~/.foundry/bin/forge ]; then
            FORGE_PATH=~/.foundry/bin/forge
          else
            # Search temp directories as fallback
            FORGE_PATH=$(find /home/runner/work -name "forge" -type f 2>/dev/null | head -1)
          fi

          if [ -n "$FORGE_PATH" ] && [ -f "$FORGE_PATH" ]; then
            # Copy all Foundry binaries to workspace bin
            FORGE_DIR=$(dirname "$FORGE_PATH")
            for binary in forge cast anvil chisel; do
              if [ -f "$FORGE_DIR/$binary" ]; then
                cp "$FORGE_DIR/$binary" bin/
                chmod +x "bin/$binary"
              fi
            done
            echo "Foundry binaries cached to workspace bin/"
          else
            echo "ERROR: Could not locate forge binary"
            exit 1
          fi
      - name: Cache setup state
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.foundry
            ~/.npm
            node_modules
            bin
          key: setup-state-${{ steps.cache-key.outputs.key }}
  markdown-link-check:
    name: Markdown Link Check
    runs-on: ubuntu-latest
    needs: [setup]
    timeout-minutes: 15
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          token: ${{ needs.setup.outputs.token || github.token }}
          submodules: recursive
      - name: Markdown Link Check
        id: markdown-link-check
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/markdown-link-checker@v0.0.3
        with:
          file-path: ${{ inputs.markdown-file-path }}
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [setup]
    timeout-minutes: 30
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          token: ${{ needs.setup.outputs.token || github.token }}
          submodules: recursive
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.foundry
            ~/.npm
            node_modules
            bin
          key: setup-state-${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Setup Foundry PATH
        run: |
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH

          # Verify forge is available
          if command -v forge >/dev/null 2>&1 || [ -f "${{ github.workspace }}/bin/forge" ]; then
            echo "✓ Foundry tools are available"
            (command -v forge && forge --version) || "${{ github.workspace }}/bin/forge" --version
          else
            echo "✗ Foundry tools not found"
            exit 1
          fi
      - name: Contract Size
        id: contract-size
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/contract-size@v0.0.3
      - name: Build
        id: build
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/onchain-build@v0.0.3
      - name: Test
        id: test
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/onchain-test@v0.0.3
        with:
          alchemy_eth_api: ${{ secrets.ALCHEMY_KEY }}
          alchemy_polygon_api: ${{ secrets.POLYGON_ALCHEMY_KEY }}
          fork-test: ${{ inputs.fork-test }}
          salt-string: ${{ inputs.salt-string }}
          skip-forte-token-tests: ${{ inputs.skip-forte-token-tests }}

  code-coverage-report:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [setup]
    timeout-minutes: 30
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          token: ${{ needs.setup.outputs.token || github.token }}
          submodules: recursive
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.foundry
            ~/.npm
            node_modules
            bin
          key: setup-state-${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true
      - name: Setup Foundry PATH
        run: |
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
      - name: Code Coverage
        id: code-coverage
        uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/actions/code-coverage@v0.0.3
        with:
          alchemy_eth_api: ${{ secrets.ALCHEMY_KEY }}
          alchemy_polygon_api: ${{ secrets.POLYGON_ALCHEMY_KEY }}
          fork-test: ${{ inputs.fork-test }}
          salt-string: ${{ inputs.salt-string }}
          skip-forte-token-tests: ${{ inputs.skip-forte-token-tests }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  # notify:
  #   name: Notify Slack on Deployment Failure
  #   needs: [build-and-test, markdown-link-check, code-coverage-report]
  #   if: always() && (needs.build-and-test.result != 'success' || needs.markdown-link-check.result != 'success' || needs.code-coverage-report.result != 'success')
  #   uses: Forte-Service-Company-Ltd/infrastructure-tooling/.github/workflows/slack-notification.yaml@v0.0.3
  #   with:
  #     env: "onchain"
  #     status: ${{ needs.build-and-test.result != 'success' && needs.build-and-test.result || needs.markdown-link-check.result != 'success' && needs.markdown-link-check.result || needs.code-coverage-report.result != 'success' && needs.code-coverage-report.result || 'failure' }}
  #     title: "On-Chain Build and Test of *${{ github.repository }}* failed. Jobs: ${{ needs.build-and-test.result != 'success' && format('Build and Test ({0})', needs.build-and-test.result) || '' }}${{ needs.build-and-test.result != 'success' && needs.markdown-link-check.result != 'success' && ', ' || '' }}${{ needs.markdown-link-check.result != 'success' && format('Markdown Link Check ({0})', needs.markdown-link-check.result) || '' }}${{ (needs.build-and-test.result != 'success' || needs.markdown-link-check.result != 'success') && needs.code-coverage-report.result != 'success' && ', ' || '' }}${{ needs.code-coverage-report.result != 'success' && format('Code Coverage ({0})', needs.code-coverage-report.result) || '' }}"
  #     notify_when: "failure,skipped"
  #   secrets: inherit

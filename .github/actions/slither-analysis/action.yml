name: On-chain Slither Analysis
description: Runs forge build and slither analysis for on-chain microservices.
inputs:
  CONFIG:
    description: Path to slither config file
    required: false
    default: ./slither.config.json
runs:
  using: "composite"
  steps:
    - name: Slither Analyze
      id: slither
      shell: bash
      run: |
        pip install slither-analyzer
        slither --config-file ${{ inputs.CONFIG }} --sarif results.sarif --fail-none .

    - name: Upload SARIF file
      uses: actions/upload-artifact@v4
      with:
        name: results.sarif
        path: ${{ steps.slither.outputs.sarif }}
        retention-days: 5

    - name: Create/update checklist as PR comment
      uses: actions/github-script@v7
      env:
        REPORT: ${{ steps.slither-pull.outputs.stdout }}
      with:
        script: |
          const header = '<details><summary>Slither report</summary>\n'
          const body = process.env.REPORT + '</details>'
          const comment = [header, body].join("\n");

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number,
          });

          const botComment = comments.find(
            (comment) =>
              // github-actions bot user
              comment.user.id === 41898282 && comment.body.startsWith(header)
          );

          const commentFn = botComment ? "updateComment" : "createComment";

          await github.rest.issues[commentFn]({
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment,
            ...(botComment
              ? { comment_id: botComment.id }
              : { issue_number: context.payload.number }),
          });

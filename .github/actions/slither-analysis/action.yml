name: On-chain Slither Analysis
description: Runs forge build and slither analysis for on-chain microservices.
inputs:
  CONFIG:
    description: Path to slither config file
    required: false
    default: ./slither.config.json
runs:
  using: "composite"
  steps:
    - name: Slither Analyze
      id: slither
      uses: crytic/slither-action@v0.4.1
      # if: github.event_name != 'pull_request'
      continue-on-error: true
      with:
        slither-config: ${{ inputs.CONFIG }}
        fail-on: pedantic
        # sarif: results.sarif

    # - name: Upload SARIF file
    #   uses: actions/upload-artifact@v4
    #   if: always() && (github.event_name != 'pull_request')
    #   with:
    #     name: results.sarif
    #     path: ${{ steps.slither.outputs.sarif }}
    #     retention-days: 5

    # - name: Slither Analyze Pull Request
    #   id: slither-pull
    #   uses: crytic/slither-action@v0.4.1
    #   if: always() && (github.event_name == 'pull_request')
    #   with:
    #     fail-on: pedantic
    #     slither-args: --checklist --checklist-limit 50 --skip-assembly --markdown-root ${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/

    # - name: Create/update checklist as PR comment
    #   uses: actions/github-script@v7
    #   if: always() && (github.event_name == 'pull_request')
    #   env:
    #     REPORT: ${{ steps.slither-pull.outputs.stdout }}
    #   with:
    #     script: |
    #       const header = '<details><summary>Slither report</summary>\n'
    #       const body = process.env.REPORT + '</details>'
    #       const comment = [header, body].join("\n");

    #       const { data: comments } = await github.rest.issues.listComments({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         issue_number: context.payload.number,
    #       });

    #       const botComment = comments.find(
    #         (comment) =>
    #           // github-actions bot user
    #           comment.user.id === 41898282 && comment.body.startsWith(header)
    #       );

    #       const commentFn = botComment ? "updateComment" : "createComment";

    #       await github.rest.issues[commentFn]({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: comment,
    #         ...(botComment
    #           ? { comment_id: botComment.id }
    #           : { issue_number: context.payload.number }),
    #       });

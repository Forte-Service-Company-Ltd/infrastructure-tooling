name: TypeScript Build
description: Build Typescript projects with support for multiple workspaces
inputs:
  components:
    description: Optional components to build (e.g. "server", "client"). Corresponds to a "script" defined in package.json.
    required: false
  node-version:
    description: The version of Node.js to use. (e.g. "20", "22", "lts/*", "current", etc.) Defaults to "20.x".
    required: false
    default: '20.x'
  package-manager:
    description: The package manager to use (e.g. "yarn" or "npm"). Defaults to "yarn".
    required: false
    default: yarn
  yarn-version:
    description: The version of Yarn to use, if using Yarn as the package manager. Defaults to "classic" (Yarn 1).
    required: false
    default: classic
  working-directory:
    description: The working directory to run the build in. Defaults to the repository root.
    required: false
    default: .
  submodules:
    description: Whether to checkout git submodules. Values may be 'recursive', 'true', or 'false'. Defaults to 'false'.
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}
        fetch-depth: '0'
        fetch-tags: true
        submodules: ${{ inputs.submodules }}

    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ inputs.package-manager }}

    - name: Validate package manager
      shell: bash
      run: |
        if [[ "${{ inputs.package-manager }}" != "yarn" && "${{ inputs.package-manager }}" != "npm" ]]; then
          echo "Error: package-manager must be 'yarn' or 'npm'"
          exit 1
        fi
      working-directory: ${{ inputs.working-directory }}

    - name: Setup Yarn Version
      id: yarn-version
      if: ${{ inputs.package-manager == 'yarn' }}
      shell: bash
      run: |
        echo "::group::Setting up Yarn version"
        if [[ "${{ inputs.yarn-version }}" != "classic" ]]; then
          corepack enable
          corepack prepare yarn@${{ inputs.yarn-version }} --activate
          echo "yarn_install_args=--immutable" >> $GITHUB_OUTPUT
        else
          echo "Using Yarn classic (v1)"
          echo "yarn_install_args=--frozen-lockfile" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"
      working-directory: ${{ inputs.working-directory }}

    - name: Install dependencies
      shell: bash
      run: |
        echo "::group::Installing dependencies"
        if [[ "${{ inputs.package-manager }}" == "yarn" ]]; then
          yarn install ${{ steps.yarn-version.outputs.yarn_install_args }}
        else
          npm ci
        fi
        echo "::endgroup::"
      working-directory: ${{ inputs.working-directory }}

    # We'll assume that each component has a script defined, such that we can run `yarn <component> build` instead of `yarn workspace <component> build`
    - name: Build components
      shell: bash
      run: |
        echo "::group::Building Project/Components"
        pman=${{ inputs.package-manager }}

        # Build whole project if no components specified
        if [[ -z "${{ inputs.components }}" ]]; then
          echo "Running ${pman} build"
          ${pman} run build
        else
        # Build each component
          IFS=',' read -ra COMPONENTS <<< "${{ inputs.components }}"
          for component in "${COMPONENTS[@]}"; do
            component=$(echo "$component" | xargs) # Trim whitespace
            echo "Running ${pman} $component build"
            ${pman} run "$component" build
          done
        fi
        echo "::endgroup::"
      working-directory: ${{ inputs.working-directory }}
